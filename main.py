import ply.lex as lex

S = 0
D = 1
S1 = 2
I = 3
V = 4
W = 5
Q = 6
Q1 = 7
C = 8
P = 9
G = 10
E = 11
F = 12
L = 13
O = 14
V1 = 15
V2 = 16
V3 = 17
V4 = 18
V5 = 19
H = 20
N = 21
N1 = 22
R = 23
R1 = 24
B = 25
K = 26
A = 27
T1 = 28
Z = 29
T2 = 30
T3 = 31
T4 = 32
T5 = 33

# List of token names. Required
tokens = [
    "LPAREN",
    "RPAREN",
    "inicioBloque",
    "finBloque",
    "CONST_INT",
    "CONST_FLOAT",
    "EMPTY",  # empty char
    "INCREMENT",  # ++
    "DECREMENT",  # --
    "PLUS",
    "MINUS",
    "TIMES",
    "DIVIDE",
    "MOD",
    "AND",
    "OR",
    "DIFFERENT",
    "EQUALS",
    "LESS",
    "GREATER",
    "ID",
    "COMMA",
    "APOSTROPHE",  # '
    "finInstruccion",  # ;
    "COMMENT",
    "COMMENTBLOCK",
    "ASSIGNMENT",  # =
    "DOT",  # .
    "eof"  # $
]

reserved_words = {
    "int": "int",
    "main": "main",
    "void": "void",
    "return": "return",
    "float": "float",
    "char": "char",
    "struct": "struct",
    "if": "if",
    "else": "else",
    "do": "do",
    "while": "while",
    'break': 'break',  # se debe poner gramatica
    "for": "for"
}

# Add words reserved to tokens array
tokens += list(reserved_words.values())

# Regular expression rules for simple tokens
t_PLUS = r'\+'
t_MINUS = r'-'
t_TIMES = r'\*'
t_DIVIDE = r'/'
t_MOD = r"\%"
t_AND = r"\&\&"
t_OR = r"\|\|"
t_INCREMENT = r"\+\+"
t_DECREMENT = r"\-\-"
t_DIFFERENT = r"\!\="
t_EQUALS = r"\=\="
t_LESS = r"\<"
t_GREATER = r"\>"
t_LPAREN = r"\("
t_RPAREN = r"\)"
t_inicioBloque = r'\{'
t_finBloque = r'\}'
t_finInstruccion = r'\;'
t_ASSIGNMENT = r"\="
t_APOSTROPHE = r"\'"
t_EMPTY = r"\'\'"
t_COMMA = r'\,'
t_DOT = r'\.'
t_eof = r'\$'


# A regular expression rule
def t_COMMENT(t):
    r"\/\/.*"
    pass


def t_COMMENTBLOCK(t):
    r"\/\*(.|\n)*\*\/"
    pass


def t_ID(t):
    r'([a-z]|[A-Z]|_)([a-z]|[A-Z]|\d|_)*'
    t.type = reserved_words.get(t.value, "ID")  # Check for reserved words
    return t

def t_CONST_FLOAT(t):
    r'[-+]?[0-9]+(\.([0-9]+)?([eE][-+]?[0-9]+)?|[eE][-+]?[0-9]+)'
    t.value = float(t.value)
    return t

def t_CONST_INT(t):
    r"\d+(\.\d+)?"
    t.value = int(t.value)
    return t

# Define a rule so we can track line numbers
def t_newline(t):
    r'\n+'
    t.lexer.lineno += len(t.value)


# A string containing ignored characters (spaces and tabs)
t_ignore = " \t"


# Error handling rule
def t_error(t):
    print("Illegal character '%s'" % t.value[0])
    t.lexer.skip(1)
    return t


tabla = [
    [D, 'int', ['int']],
    [D, 'main', None],
    [D, 'LPAREN', None],
    [D, 'RPAREN', None],
    [D, 'void', None],
    [D, 'inicioBloque', None],
    [D, 'return', None],
    [D, 'finBloque', None],
    [D, 'CONST_INT', None],
    [D, 'CONST_FLOAT', None],
    [D, 'EMPTY', None],
    [D, 'char', ['char']],
    [D, 'struct', None],
    [D, 'float', ['float']],
    [D, 'MOD', None],
    [D, 'if', None],
    [D, 'else', None],
    [D, 'do', None],
    [D, 'while', None],
    [D, 'ID', None],
    [D, 'COMMA', None],
    [D, 'finInstruccion', None],
    [D, 'DECREMENT', None],
    [D, 'INCREMENT', None],
    [D, 'PLUS', None],
    [D, 'MINUS', None],
    [D, 'TIMES', None],
    [D, 'DIVIDE', None],
    [D, 'LESS', None],
    [D, 'GREATER', None],
    [D, 'ASSIGNMENT', None],
    [D, 'EQUALS', None],
    [D, 'DIFFERENT', None],
    [D, 'AND', None],
    [D, 'OR', None],
    [D, 'DOT', None],
    [D, 'APOSTROPHE', None],
    [D, 'for', None],
    [D, 'eof', None],

    [S, 'int', ['int', 'main', 'LPAREN', 'RPAREN', 'inicioBloque', S1, 'return', 'CONST_INT', 'finBloque']],
    [S, 'main', None],
    [S, 'LPAREN', None],
    [S, 'RPAREN', None],
    [S, 'void', None],
    [S, 'inicioBloque', None],
    [S, 'return', None],
    [S, 'finBloque', None],
    [S, 'CONST_INT', None],
    [S, 'CONST_FLOAT', None],
    [S, 'EMPTY', None],
    [S, 'char', None],
    [S, 'struct', None],
    [S, 'float', None],
    [S, 'MOD', None],
    [S, 'if', None],
    [S, 'else', None],
    [S, 'do', None],
    [S, 'while', None],
    [S, 'ID', None],
    [S, 'COMMA', None],
    [S, 'finInstruccion', None],
    [S, 'DECREMENT', None],
    [S, 'INCREMENT', None],
    [S, 'PLUS', None],
    [S, 'MINUS', None],
    [S, 'TIMES', None],
    [S, 'DIVIDE', None],
    [S, 'LESS', None],
    [S, 'GREATER', None],
    [S, 'ASSIGNMENT', None],
    [S, 'EQUALS', None],
    [S, 'DIFFERENT', None],
    [S, 'AND', None],
    [S, 'OR', None],
    [S, 'DOT', None],
    [S, 'APOSTROPHE', None],
    [S, 'for', None],
    [S, 'eof', ['int', 'main', 'LPAREN', 'RPAREN', 'inicioBloque', S1, 'return', 'CONST_INT', 'finBloque']],

    [S1, 'int', [V, S1]],
    [S1, 'main', None],
    [S1, 'LPAREN', None],
    [S1, 'RPAREN', None],
    [S1, 'void', None],
    [S1, 'inicioBloque', None],
    [S1, 'return', ['vacia']],
    [S1, 'finBloque', ['vacia']],
    [S1, 'CONST_INT', None],
    [S1, 'CONST_FLOAT', None],
    [S1, 'EMPTY', None],
    [S1, 'char', [V, S1]],
    [S1, 'struct', ['struct', 'ID', 'DOT', 'ID', 'ASSIGNMENT', B, 'finInstruccion', S1]],
    [S1, 'float', [V, S1]],
    [S1, 'MOD', None],
    [S1, 'if', [I, S1]],
    [S1, 'else', None],
    [S1, 'do', [G, S1]],
    [S1, 'while', [W, S1]],
    [S1, 'ID', ['ID', 'LPAREN', T2, 'RPAREN', 'finInstruccion', S1]],
    [S1, 'COMMA', None],
    [S1, 'finInstruccion', None],
    [S1, 'DECREMENT', None],
    [S1, 'INCREMENT', None],
    [S1, 'PLUS', None],
    [S1, 'MINUS', None],
    [S1, 'TIMES', None],
    [S1, 'DIVIDE', None],
    [S1, 'LESS', None],
    [S1, 'GREATER', None],
    [S1, 'ASSIGNMENT', None],
    [S1, 'EQUALS', None],
    [S1, 'DIFFERENT', None],
    [S1, 'AND', None],
    [S1, 'OR', None],
    [S1, 'DOT', None],
    [S1, 'APOSTROPHE', None],
    [S1, 'for', [Q, S1]],
    [S1, 'eof', None],

    [I, 'int', None],
    [I, 'main', None],
    [I, 'LPAREN', None],
    [I, 'RPAREN', None],
    [I, 'void', None],
    [I, 'inicioBloque', None],
    [I, 'return', None],
    [I, 'finBloque', None],
    [I, 'CONST_INT', None],
    [I, 'CONST_FLOAT', None],
    [I, 'EMPTY', None],
    [I, 'char', None],
    [I, 'struct', None],
    [I, 'float', None],
    [I, 'MOD', None],
    [I, 'if', ['if', 'LPAREN', C, 'RPAREN', 'inicioBloque', S1, 'finBloque', E]],
    [I, 'else', None],
    [I, 'do', None],
    [I, 'while', None],
    [I, 'ID', None],
    [I, 'COMMA', None],
    [I, 'finInstruccion', None],
    [I, 'DECREMENT', None],
    [I, 'INCREMENT', None],
    [I, 'PLUS', None],
    [I, 'MINUS', None],
    [I, 'TIMES', None],
    [I, 'DIVIDE', None],
    [I, 'LESS', None],
    [I, 'GREATER', None],
    [I, 'ASSIGNMENT', None],
    [I, 'EQUALS', None],
    [I, 'DIFFERENT', None],
    [I, 'AND', None],
    [I, 'OR', None],
    [I, 'DOT', None],
    [I, 'APOSTROPHE', None],
    [I, 'for', None],
    [I, 'eof', None],

    [V, 'int', [D, 'ID', V1]],
    [V, 'main', None],
    [V, 'LPAREN', None],
    [V, 'RPAREN', None],
    [V, 'void', None],
    [V, 'inicioBloque', None],
    [V, 'return', None],
    [V, 'finBloque', None],
    [V, 'CONST_INT', None],
    [V, 'CONST_FLOAT', None],
    [V, 'EMPTY', None],
    [V, 'char', [D, 'ID', V1]],
    [V, 'struct', None],
    [V, 'float', [D, 'ID', V1]],
    [V, 'MOD', None],
    [V, 'if', None],
    [V, 'else', None],
    [V, 'do', None],
    [V, 'while', None],
    [V, 'ID', None],
    [V, 'COMMA', None],
    [V, 'finInstruccion', None],
    [V, 'DECREMENT', None],
    [V, 'INCREMENT', None],
    [V, 'PLUS', None],
    [V, 'MINUS', None],
    [V, 'TIMES', None],
    [V, 'DIVIDE', None],
    [V, 'LESS', None],
    [V, 'GREATER', None],
    [V, 'ASSIGNMENT', None],
    [V, 'EQUALS', None],
    [V, 'DIFFERENT', None],
    [V, 'AND', None],
    [V, 'OR', None],
    [V, 'DOT', None],
    [V, 'APOSTROPHE', None],
    [V, 'for', None],
    [V, 'eof', None],

    [W, 'int', None],
    [W, 'main', None],
    [W, 'LPAREN', None],
    [W, 'RPAREN', None],
    [W, 'void', None],
    [W, 'inicioBloque', None],
    [W, 'return', None],
    [W, 'finBloque', None],
    [W, 'CONST_INT', None],
    [W, 'CONST_FLOAT', None],
    [W, 'EMPTY', None],
    [W, 'char', None],
    [W, 'struct', None],
    [W, 'float', None],
    [W, 'MOD', None],
    [W, 'if', None],
    [W, 'else', None],
    [W, 'do', None],
    [W, 'while', ['while', 'LPAREN', C, 'RPAREN', 'inicioBloque', S1, 'finBloque']],
    [W, 'ID', None],
    [W, 'COMMA', None],
    [W, 'finInstruccion', None],
    [W, 'DECREMENT', None],
    [W, 'INCREMENT', None],
    [W, 'PLUS', None],
    [W, 'MINUS', None],
    [W, 'TIMES', None],
    [W, 'DIVIDE', None],
    [W, 'LESS', None],
    [W, 'GREATER', None],
    [W, 'ASSIGNMENT', None],
    [W, 'EQUALS', None],
    [W, 'DIFFERENT', None],
    [W, 'AND', None],
    [W, 'OR', None],
    [W, 'DOT', None],
    [W, 'APOSTROPHE', None],
    [W, 'for', None],
    [W, 'eof', None],

    [Q, 'int', None],
    [Q, 'main', None],
    [Q, 'LPAREN', None],
    [Q, 'RPAREN', None],
    [Q, 'void', None],
    [Q, 'inicioBloque', None],
    [Q, 'return', None],
    [Q, 'finBloque', None],
    [Q, 'CONST_INT', None],
    [Q, 'CONST_FLOAT', None],
    [Q, 'EMPTY', None],
    [Q, 'char', None],
    [Q, 'struct', None],
    [Q, 'float', None],
    [Q, 'MOD', None],
    [Q, 'if', None],
    [Q, 'else', None],
    [Q, 'do', None],
    [Q, 'while', None],
    [Q, 'ID', None],
    [Q, 'COMMA', None],
    [Q, 'finInstruccion', None],
    [Q, 'DECREMENT', None],
    [Q, 'INCREMENT', None],
    [Q, 'PLUS', None],
    [Q, 'MINUS', None],
    [Q, 'TIMES', None],
    [Q, 'DIVIDE', None],
    [Q, 'LESS', None],
    [Q, 'GREATER', None],
    [Q, 'ASSIGNMENT', None],
    [Q, 'EQUALS', None],
    [Q, 'DIFFERENT', None],
    [Q, 'AND', None],
    [Q, 'OR', None],
    [Q, 'DOT', None],
    [Q, 'APOSTROPHE', None],
    [Q, 'for',
     ['for', 'LPAREN', 'ID', 'ASSIGNMENT', 'CONST_INT', 'finInstruccion', 'ID', O, F, 'finInstruccion', 'ID', P,
      'RPAREN', 'inicioBloque', S1, 'finBloque']],
    [Q, 'eof', None],

    # Isma
    [Q1, 'int', None],
    [Q1, 'main', None],
    [Q1, 'LPAREN', None],
    [Q1, 'RPAREN', None],
    [Q1, 'void', None],
    [Q1, 'inicioBloque', None],
    [Q1, 'return', None],
    [Q1, 'finBloque', None],
    [Q1, 'CONST_INT', None],
    [Q1, 'CONST_FLOAT', None],
    [Q1, 'EMPTY', None],
    [Q1, 'char', None],
    [Q1, 'struct', None],
    [Q1, 'float', None],
    [Q1, 'MOD', None],
    [Q1, 'if', None],
    [Q1, 'else', None],
    [Q1, 'do', None],
    [Q1, 'while', None],
    [Q1, 'ID', [T1, Z]],
    [Q1, 'COMMA', None],
    [Q1, 'finInstruccion', None],
    [Q1, 'DECREMENT', None],
    [Q1, 'INCREMENT', None],
    [Q1, 'PLUS', None],
    [Q1, 'MINUS', None],
    [Q1, 'TIMES', None],
    [Q1, 'DIVIDE', None],
    [Q1, 'LESS', None],
    [Q1, 'GREATER', None],
    [Q1, 'ASSIGNMENT', None],
    [Q1, 'EQUALS', None],
    [Q1, 'DIFFERENT', None],
    [Q1, 'AND', None],
    [Q1, 'OR', None],
    [Q1, 'DOT', None],
    [Q1, 'APOSTROPHE', None],
    [Q1, 'for', None],
    [Q1, 'eof', None],

    [C, 'int', None],
    [C, 'main', None],
    [C, 'LPAREN', None],
    [C, 'RPAREN', None],
    [C, 'void', None],
    [C, 'inicioBloque', None],
    [C, 'return', None],
    [C, 'finBloque', None],
    [C, 'CONST_INT', [F, O, F, L]],
    [C, 'CONST_FLOAT', None],
    [C, 'EMPTY', None],
    [C, 'char', None],
    [C, 'struct', None],
    [C, 'float', None],
    [C, 'MOD', None],
    [C, 'if', None],
    [C, 'else', None],
    [C, 'do', None],
    [C, 'while', None],
    [C, 'ID', [F, O, F, L]],
    [C, 'COMMA', None],
    [C, 'finInstruccion', None],
    [C, 'DECREMENT', None],
    [C, 'INCREMENT', None],
    [C, 'PLUS', None],
    [C, 'MINUS', None],
    [C, 'TIMES', None],
    [C, 'DIVIDE', None],
    [C, 'LESS', None],
    [C, 'GREATER', None],
    [C, 'ASSIGNMENT', None],
    [C, 'EQUALS', None],
    [C, 'DIFFERENT', None],
    [C, 'AND', None],
    [C, 'OR', None],
    [C, 'DOT', None],
    [C, 'APOSTROPHE', None],
    [C, 'for', None],
    [C, 'eof', None],

    [P, 'int', None],
    [P, 'main', None],
    [P, 'LPAREN', None],
    [P, 'RPAREN', None],
    [P, 'void', None],
    [P, 'inicioBloque', None],
    [P, 'return', None],
    [P, 'finBloque', None],
    [P, 'CONST_INT', None],
    [P, 'CONST_FLOAT', None],
    [P, 'EMPTY', None],
    [P, 'char', None],
    [P, 'struct', None],
    [P, 'float', None],
    [P, 'MOD', None],
    [P, 'if', None],
    [P, 'else', None],
    [P, 'do', None],
    [P, 'while', None],
    [P, 'ID', None],
    [P, 'COMMA', None],
    [P, 'finInstruccion', None],
    [P, 'DECREMENT', ['DECREMENT']],
    [P, 'INCREMENT', ['INCREMENT']],
    [P, 'PLUS', None],
    [P, 'MINUS', None],
    [P, 'TIMES', None],
    [P, 'DIVIDE', None],
    [P, 'LESS', None],
    [P, 'GREATER', None],
    [P, 'ASSIGNMENT', None],
    [P, 'EQUALS', None],
    [P, 'DIFFERENT', None],
    [P, 'AND', None],
    [P, 'OR', None],
    [P, 'DOT', None],
    [P, 'APOSTROPHE', None],
    [P, 'for', None],
    [P, 'eof', None],

    [G, 'int', None],
    [G, 'main', None],
    [G, 'LPAREN', None],
    [G, 'RPAREN', None],
    [G, 'void', None],
    [G, 'inicioBloque', None],
    [G, 'return', None],
    [G, 'finBloque', None],
    [G, 'CONST_INT', None],
    [G, 'CONST_FLOAT', None],
    [G, 'EMPTY', None],
    [G, 'char', None],
    [G, 'struct', None],
    [G, 'float', None],
    [G, 'MOD', None],
    [G, 'if', None],
    [G, 'else', None],
    [G, 'do', ['do', 'inicioBloque', S1, 'finBloque', 'while', 'LPAREN', C, 'RPAREN']],
    [G, 'while', None],
    [G, 'ID', None],
    [G, 'COMMA', None],
    [G, 'finInstruccion', None],
    [G, 'DECREMENT', None],
    [G, 'INCREMENT', None],
    [G, 'PLUS', None],
    [G, 'MINUS', None],
    [G, 'TIMES', None],
    [G, 'DIVIDE', None],
    [G, 'LESS', None],
    [G, 'GREATER', None],
    [G, 'ASSIGNMENT', None],
    [G, 'EQUALS', None],
    [G, 'DIFFERENT', None],
    [G, 'AND', None],
    [G, 'OR', None],
    [G, 'DOT', None],
    [G, 'APOSTROPHE', None],
    [G, 'for', None],
    [G, 'eof', None],

    [E, 'int', ['vacia']],
    [E, 'main', None],
    [E, 'LPAREN', None],
    [E, 'RPAREN', None],
    [E, 'void', None],
    [E, 'inicioBloque', None],
    [E, 'return', None],
    [E, 'finBloque', None],
    [E, 'CONST_INT', None],
    [E, 'CONST_FLOAT', None],
    [E, 'EMPTY', None],
    [E, 'char', ['vacia']],
    [E, 'struct', None],
    [E, 'float', ['vacia']],
    [E, 'MOD', None],
    [E, 'if', ['vacia']],
    [E, 'else', ['else', 'inicioBloque', S1, 'finBloque']],
    [E, 'do', ['vacia']],
    [E, 'while', ['vacia']],
    [E, 'ID', ['vacia']],
    [E, 'COMMA', None],
    [E, 'finInstruccion', None],
    [E, 'DECREMENT', None],
    [E, 'INCREMENT', None],
    [E, 'PLUS', None],
    [E, 'MINUS', None],
    [E, 'TIMES', None],
    [E, 'DIVIDE', None],
    [E, 'LESS', None],
    [E, 'GREATER', None],
    [E, 'ASSIGNMENT', None],
    [E, 'EQUALS', None],
    [E, 'DIFFERENT', None],
    [E, 'AND', None],
    [E, 'OR', None],
    [E, 'DOT', None],
    [E, 'APOSTROPHE', None],
    [E, 'for', ['vacia']],
    [E, 'eof', None],

    [F, 'int', None],
    [F, 'main', None],
    [F, 'LPAREN', None],
    [F, 'RPAREN', None],
    [F, 'void', None],
    [F, 'inicioBloque', None],
    [F, 'return', None],
    [F, 'finBloque', None],
    [F, 'CONST_INT', ['CONST_INT']],
    [F, 'CONST_FLOAT', None],
    [F, 'EMPTY', None],
    [F, 'char', None],
    [F, 'struct', None],
    [F, 'float', None],
    [F, 'MOD', None],
    [F, 'if', None],
    [F, 'else', None],
    [F, 'do', None],
    [F, 'while', None],
    [F, 'ID', 'ID'],
    [F, 'COMMA', None],
    [F, 'finInstruccion', None],
    [F, 'DECREMENT', None],
    [F, 'INCREMENT', None],
    [F, 'PLUS', None],
    [F, 'MINUS', None],
    [F, 'TIMES', None],
    [F, 'DIVIDE', None],
    [F, 'LESS', None],
    [F, 'GREATER', None],
    [F, 'ASSIGNMENT', None],
    [F, 'EQUALS', None],
    [F, 'DIFFERENT', None],
    [F, 'AND', None],
    [F, 'OR', None],
    [F, 'DOT', None],
    [F, 'APOSTROPHE', None],
    [F, 'for', None],
    [F, 'eof', None],

    [L, 'int', None],
    [L, 'main', None],
    [L, 'LPAREN', None],
    [L, 'RPAREN', ['vacia']],
    [L, 'void', None],
    [L, 'inicioBloque', None],
    [L, 'return', None],
    [L, 'finBloque', None],
    [L, 'CONST_INT', None],
    [L, 'CONST_FLOAT', None],
    [L, 'EMPTY', None],
    [L, 'char', None],
    [L, 'struct', None],
    [L, 'float', None],
    [L, 'MOD', None],
    [L, 'if', None],
    [L, 'else', None],
    [L, 'do', None],
    [L, 'while', None],
    [L, 'ID', ['ID']],
    [L, 'COMMA', None],
    [L, 'finInstruccion', None],
    [L, 'DECREMENT', None],
    [L, 'INCREMENT', None],
    [L, 'PLUS', None],
    [L, 'MINUS', None],
    [L, 'TIMES', None],
    [L, 'DIVIDE', None],
    [L, 'LESS', [O, F, L]],
    [L, 'GREATER', [O, F, L]],
    [L, 'ASSIGNMENT', None],
    [L, 'EQUALS', [O, F, L]],
    [L, 'DIFFERENT', [O, F, L]],
    [L, 'AND', [O, F, L]],
    [L, 'OR', [O, F, L]],
    [L, 'DOT', None],
    [L, 'APOSTROPHE', None],
    [L, 'for', None],
    [L, 'eof', None],

    # Plei
    [O, 'int', None],
    [O, 'main', None],
    [O, 'LPAREN', None],
    [O, 'RPAREN', None],
    [O, 'void', None],
    [O, 'inicioBloque', None],
    [O, 'return', None],
    [O, 'finBloque', None],
    [O, 'CONST_INT', None],
    [O, 'CONST_FLOAT', None],
    [O, 'EMPTY', None],
    [O, 'char', None],
    [O, 'struct', None],
    [O, 'float', None],
    [O, 'if', None],
    [O, 'else', None],
    [O, 'do', None],
    [O, 'while', None],
    [O, 'ID', None],
    [O, 'COMMA', None],
    [O, 'finInstruccion', None],
    [O, 'DECREMENT', None],
    [O, 'INCREMENT', None],
    [O, 'TIMES', None],
    [O, 'MINUS', None],
    [O, 'PLUS', None],
    [O, 'DIVIDE', None],
    [O, 'LESS', ['LESS']],
    [O, 'GREATER', ['GREATER']],
    [O, 'ASSIGNMENT', None],
    [O, 'EQUALS', ['EQUALS']],
    [O, 'DIFFERENT', ['DIFFERENT']],
    [O, 'AND', ['AND']],
    [O, 'OR', ['OR']],
    [O, 'DOT', None],
    [O, 'APOSTROPHE', None],
    [O, 'for', None],
    [O, 'eof', None],
    [V1, 'int', None],
    [V1, 'main', None],
    [V1, 'LPAREN', None],
    [V1, 'RPAREN', None],
    [V1, 'void', None],
    [V1, 'inicioBloque', None],
    [V1, 'return', None],
    [V1, 'finBloque', None],
    [V1, 'CONST_INT', None],
    [V1, 'CONST_FLOAT', None],
    [V1, 'EMPTY', None],
    [V1, 'char', None],
    [V1, 'struct', None],
    [V1, 'float', None],
    [V1, 'if', None],
    [V1, 'else', None],
    [V1, 'do', None],
    [V1, 'while', None],
    [V1, 'ID', None],
    [V1, 'COMMA', ['COMMA', 'ID', V1]],
    [V1, 'finInstruccion', ['finInstruccion']],
    [V1, 'DECREMENT', None],
    [V1, 'INCREMENT', None],
    [V1, 'TIMES', None],
    [V1, 'MINUS', None],
    [V1, 'PLUS', None],
    [V1, 'DIVIDE', None],
    [V1, 'LESS', None],
    [V1, 'GREATER', None],
    [V1, 'ASSIGNMENT', None],
    [V1, 'EQUALS', ['EQUALS', V2]],
    [V1, 'DIFFERENT', None],
    [V1, 'AND', None],
    [V1, 'OR', None],
    [V1, 'DOT', None],
    [V1, 'APOSTROPHE', None],
    [V1, 'for', None],
    [V1, 'eof', None],
    [V2, 'int', None],
    [V2, 'main', None],
    [V2, 'LPAREN', None],
    [V2, 'RPAREN', None],
    [V2, 'void', None],
    [V2, 'inicioBloque', None],
    [V2, 'return', None],
    [V2, 'finBloque', None],
    [V2, 'CONST_INT', [V3, V4]],
    [V2, 'CONST_FLOAT', [V3, V4]],
    [V2, 'EMPTY', [V3, V4]],
    [V2, 'char', None],
    [V2, 'struct', None],
    [V2, 'float', None],
    [V2, 'if', None],
    [V2, 'else', None],
    [V2, 'do', None],
    [V2, 'while', None],
    [V2, 'ID', None],
    [V2, 'COMMA', None],
    [V2, 'finInstruccion', None],
    [V2, 'DECREMENT', None],
    [V2, 'INCREMENT', None],
    [V2, 'TIMES', None],
    [V2, 'MINUS', None],
    [V2, 'PLUS', None],
    [V2, 'DIVIDE', None],
    [V2, 'LESS', None],
    [V2, 'GREATER', None],
    [V2, 'ASSIGNMENT', None],
    [V2, 'EQUALS', None],
    [V2, 'DIFFERENT', None],
    [V2, 'AND', None],
    [V2, 'OR', None],
    [V2, 'DOT', None],
    [V2, 'APOSTROPHE', ['APOSTROPHE', 'ID', 'APOSTROPHE', V5]],
    [V2, 'for', None],
    [V2, 'eof', None],
    [V3, 'int', None],
    [V3, 'main', None],
    [V3, 'LPAREN', None],
    [V3, 'RPAREN', None],
    [V3, 'void', None],
    [V3, 'inicioBloque', None],
    [V3, 'return', None],
    [V3, 'finBloque', None],
    [V3, 'CONST_INT', ['CONST_INT']],
    [V3, 'CONST_FLOAT', ['CONST_FLOAT']],
    [V3, 'EMPTY', ['EMPTY']],
    [V3, 'char', None],
    [V3, 'struct', None],
    [V3, 'float', None],
    [V3, 'if', None],
    [V3, 'else', None],
    [V3, 'do', None],
    [V3, 'while', None],
    [V3, 'ID', None],
    [V3, 'COMMA', None],
    [V3, 'finInstruccion', None],
    [V3, 'DECREMENT', None],
    [V3, 'INCREMENT', None],
    [V3, 'TIMES', None],
    [V3, 'MINUS', None],
    [V3, 'PLUS', None],
    [V3, 'DIVIDE', None],
    [V3, 'LESS', None],
    [V3, 'GREATER', None],
    [V3, 'ASSIGNMENT', None],
    [V3, 'EQUALS', None],
    [V3, 'DIFFERENT', None],
    [V3, 'AND', None],
    [V3, 'OR', None],
    [V3, 'DOT', None],
    [V3, 'APOSTROPHE', None],
    [V3, 'for', None],
    [V3, 'eof', None],
    [V4, 'int', None],
    [V4, 'main', None],
    [V4, 'LPAREN', None],
    [V4, 'RPAREN', None],
    [V4, 'void', None],
    [V4, 'inicioBloque', None],
    [V4, 'return', None],
    [V4, 'finBloque', None],
    [V4, 'CONST_INT', None],
    [V4, 'CONST_FLOAT', None],
    [V4, 'EMPTY', None],
    [V4, 'char', None],
    [V4, 'struct', None],
    [V4, 'float', None],
    [V4, 'if', None],
    [V4, 'else', None],
    [V4, 'do', None],
    [V4, 'while', None],
    [V4, 'ID', None],
    [V4, 'COMMA', ['COMMA', 'ID', V1]],
    [V4, 'finInstruccion', ['finInstruccion']],
    [V4, 'DECREMENT', None],
    [V4, 'INCREMENT', None],
    [V4, 'TIMES', None],
    [V4, 'MINUS', None],
    [V4, 'PLUS', None],
    [V4, 'DIVIDE', None],
    [V4, 'LESS', None],
    [V4, 'GREATER', None],
    [V4, 'ASSIGNMENT', None],
    [V4, 'EQUALS', None],
    [V4, 'DIFFERENT', None],
    [V4, 'AND', None],
    [V4, 'OR', None],
    [V4, 'DOT', None],
    [V4, 'APOSTROPHE', None],
    [V4, 'for', None],
    [V4, 'eof', None],
    [V5, 'int', None],
    [V5, 'main', None],
    [V5, 'LPAREN', None],
    [V5, 'RPAREN', None],
    [V5, 'void', None],
    [V5, 'inicioBloque', None],
    [V5, 'return', None],
    [V5, 'finBloque', None],
    [V5, 'CONST_INT', None],
    [V5, 'CONST_FLOAT', None],
    [V5, 'EMPTY', None],
    [V5, 'char', None],
    [V5, 'struct', None],
    [V5, 'float', None],
    [V5, 'if', None],
    [V5, 'else', None],
    [V5, 'do', None],
    [V5, 'while', None],
    [V5, 'ID', None],
    [V5, 'COMMA', ['COMMA', 'ID', V1]],
    [V5, 'finInstruccion', ['finInstruccion']],
    [V5, 'DECREMENT', None],
    [V5, 'INCREMENT', None],
    [V5, 'TIMES', None],
    [V5, 'MINUS', None],
    [V5, 'PLUS', None],
    [V5, 'DIVIDE', None],
    [V5, 'LESS', None],
    [V5, 'GREATER', None],
    [V5, 'ASSIGNMENT', None],
    [V5, 'EQUALS', None],
    [V5, 'DIFFERENT', None],
    [V5, 'AND', None],
    [V5, 'OR', None],
    [V5, 'DOT', None],
    [V5, 'APOSTROPHE', None],
    [V5, 'for', None],
    [V5, 'eof', None],
    [H, 'int', None],
    [H, 'main', None],
    [H, 'LPAREN', None],
    [H, 'RPAREN', None],
    [H, 'void', None],
    [H, 'inicioBloque', None],
    [H, 'return', None],
    [H, 'finBloque', None],
    [H, 'CONST_INT', None],
    [H, 'CONST_FLOAT', None],
    [H, 'EMPTY', None],
    [H, 'char', None],
    [H, 'struct', ['struct', 'inicioBloque', V, 'finBloque', N]],
    [H, 'float', None],
    [H, 'if', None],
    [H, 'else', None],
    [H, 'do', None],
    [H, 'while', None],
    [H, 'ID', None],
    [H, 'COMMA', None],
    [H, 'finInstruccion', None],
    [H, 'DECREMENT', None],
    [H, 'INCREMENT', None],
    [H, 'TIMES', None],
    [H, 'MINUS', None],
    [H, 'PLUS', None],
    [H, 'DIVIDE', None],
    [H, 'LESS', None],
    [H, 'GREATER', None],
    [H, 'ASSIGNMENT', None],
    [H, 'EQUALS', None],
    [H, 'DIFFERENT', None],
    [H, 'AND', None],
    [H, 'OR', None],
    [H, 'DOT', None],
    [H, 'APOSTROPHE', None],
    [H, 'for', None],
    [H, 'eof', ['struct', 'inicioBloque', V, 'finBloque', N]],

    # Bryan
    [N, 'int', None],
    [N, 'main', None],
    [N, 'LPAREN', None],
    [N, 'RPAREN', None],
    [N, 'void', None],
    [N, 'inicioBloque', None],
    [N, 'return', None],
    [N, 'finBloque', None],
    [N, 'CONST_INT', None],
    [N, 'CONST_FLOAT', None],
    [N, 'EMPTY', None],
    [N, 'char', None],
    [N, 'struct', None],
    [N, 'float', None],
    [N, 'MOD', None],
    [N, 'if', None],
    [N, 'else', None],
    [N, 'do', None],
    [N, 'while', None],
    [N, 'ID', ['ID', N1]],
    [N, 'COMMA', None],
    [N, 'finInstruccion', None],
    [N, 'DECREMENT', None],
    [N, 'INCREMENT', None],
    [N, 'PLUS', None],
    [N, 'MINUS', None],
    [N, 'TIMES', None],
    [N, 'DIVIDE', None],
    [N, 'LESS', None],
    [N, 'GREATER', None],
    [N, 'ASSIGNMENT', None],
    [N, 'EQUALS', None],
    [N, 'DIFFERENT', None],
    [N, 'AND', None],
    [N, 'OR', None],
    [N, 'DOT', None],
    [N, 'APOSTROPHE', None],
    [N, 'for', None],
    [N, 'eof', ['ID', N1]],

    [N1, 'int', None],
    [N1, 'main', None],
    [N1, 'LPAREN', None],
    [N1, 'RPAREN', None],
    [N1, 'void', None],
    [N1, 'inicioBloque', None],
    [N1, 'return', None],
    [N1, 'finBloque', None],
    [N1, 'CONST_INT', None],
    [N1, 'CONST_FLOAT', None],
    [N1, 'EMPTY', None],
    [N1, 'char', None],
    [N1, 'struct', None],
    [N1, 'float', None],
    [N1, 'MOD', None],
    [N1, 'if', None],
    [N1, 'else', None],
    [N1, 'do', None],
    [N1, 'while', None],
    [N1, 'ID', None],
    [N1, 'COMMA', ['COMMA', N]],
    [N1, 'finInstruccion', ['finInstruccion']],
    [N1, 'DECREMENT', None],
    [N1, 'INCREMENT', None],
    [N1, 'PLUS', None],
    [N1, 'MINUS', None],
    [N1, 'TIMES', None],
    [N1, 'DIVIDE', None],
    [N1, 'LESS', None],
    [N1, 'GREATER', None],
    [N1, 'ASSIGNMENT', None],
    [N1, 'EQUALS', None],
    [N1, 'DIFFERENT', None],
    [N1, 'AND', None],
    [N1, 'OR', None],
    [N1, 'DOT', None],
    [N1, 'APOSTROPHE', None],
    [N1, 'for', None],
    [N1, 'eof', ['COMMA', N]],

    [R, 'int', [D, 'ID', 'LPAREN', T4, 'RPAREN', 'inicioBloque', S1, 'return', 'LPAREN', V3, 'RPAREN', 'finBloque']],
    [R, 'main', None],
    [R, 'LPAREN', None],
    [R, 'RPAREN', None],
    [R, 'void', None],
    [R, 'inicioBloque', None],
    [R, 'return', None],
    [R, 'finBloque', None],
    [R, 'CONST_INT', None],
    [R, 'CONST_FLOAT', None],
    [R, 'EMPTY', None],
    [R, 'char', [D, 'ID', 'LPAREN', T4, 'RPAREN', 'inicioBloque', S1, 'return', 'LPAREN', V3, 'RPAREN', 'finBloque']],
    [R, 'struct', None],
    [R, 'float', [D, 'ID', 'LPAREN', T4, 'RPAREN', 'inicioBloque', S1, 'return', 'LPAREN', V3, 'RPAREN', 'finBloque']],
    [R, 'MOD', None],
    [R, 'if', None],
    [R, 'else', None],
    [R, 'do', None],
    [R, 'while', None],
    [R, 'ID', None],
    [R, 'COMMA', None],
    [R, 'finInstruccion', None],
    [R, 'DECREMENT', None],
    [R, 'INCREMENT', None],
    [R, 'PLUS', None],
    [R, 'MINUS', None],
    [R, 'TIMES', None],
    [R, 'DIVIDE', None],
    [R, 'LESS', None],
    [R, 'GREATER', None],
    [R, 'ASSIGNMENT', None],
    [R, 'EQUALS', None],
    [R, 'DIFFERENT', None],
    [R, 'AND', None],
    [R, 'OR', None],
    [R, 'DOT', None],
    [R, 'APOSTROPHE', None],
    [R, 'for', None],
    [R, 'eof', [D, 'ID', 'LPAREN', V, 'RPAREN', 'inicioBloque', S1, 'return', 'LPAREN', V3, 'RPAREN', 'finBloque']],

    [R1, 'int', None],
    [R1, 'main', None],
    [R1, 'LPAREN', None],
    [R1, 'RPAREN', None],
    [R1, 'void', ['void', 'ID', 'LPAREN', 'RPAREN', 'inicioBloque', S1, 'finBloque']],
    [R1, 'inicioBloque', None],
    [R1, 'return', None],
    [R1, 'finBloque', None],
    [R1, 'CONST_INT', None],
    [R1, 'CONST_FLOAT', None],
    [R1, 'EMPTY', None],
    [R1, 'char', None],
    [R1, 'struct', None],
    [R1, 'float', None],
    [R1, 'MOD', None],
    [R1, 'if', None],
    [R1, 'else', None],
    [R1, 'do', None],
    [R1, 'while', None],
    [R1, 'ID', None],
    [R1, 'COMMA', None],
    [R1, 'finInstruccion', None],
    [R1, 'DECREMENT', None],
    [R1, 'INCREMENT', None],
    [R1, 'PLUS', None],
    [R1, 'MINUS', None],
    [R1, 'TIMES', None],
    [R1, 'DIVIDE', None],
    [R1, 'LESS', None],
    [R1, 'GREATER', None],
    [R1, 'ASSIGNMENT', None],
    [R1, 'EQUALS', None],
    [R1, 'DIFFERENT', None],
    [R1, 'AND', None],
    [R1, 'OR', None],
    [R1, 'DOT', None],
    [R1, 'APOSTROPHE', None],
    [R1, 'for', None],
    [R1, 'eof', ['void', 'ID', 'LPAREN', 'RPAREN', 'inicioBloque', S1, 'finBloque']],

    [B, 'int', None],
    [B, 'main', None],
    [B, 'LPAREN', None],
    [B, 'RPAREN', None],
    [B, 'void', None],
    [B, 'inicioBloque', None],
    [B, 'return', None],
    [B, 'finBloque', None],
    [B, 'CONST_INT', None],
    [B, 'CONST_FLOAT', None],
    [B, 'EMPTY', None],
    [B, 'char', None],
    [B, 'struct', None],
    [B, 'float', None],
    [B, 'MOD', None],
    [B, 'if', None],
    [B, 'else', None],
    [B, 'do', None],
    [B, 'while', None],
    [B, 'ID', ['ID', 'ASSIGNMENT', K]],
    [B, 'COMMA', None],
    [B, 'finInstruccion', None],
    [B, 'DECREMENT', None],
    [B, 'INCREMENT', None],
    [B, 'PLUS', None],
    [B, 'MINUS', None],
    [B, 'TIMES', None],
    [B, 'DIVIDE', None],
    [B, 'LESS', None],
    [B, 'GREATER', None],
    [B, 'ASSIGNMENT', None],
    [B, 'EQUALS', None],
    [B, 'DIFFERENT', None],
    [B, 'AND', None],
    [B, 'OR', None],
    [B, 'DOT', None],
    [B, 'APOSTROPHE', None],
    [B, 'for', None],
    [B, 'eof', None],

    [K, 'int', None],
    [K, 'main', None],
    [K, 'LPAREN', [Q1, A]],
    [K, 'RPAREN', None],
    [K, 'void', None],
    [K, 'inicioBloque', None],
    [K, 'return', None],
    [K, 'finBloque', None],
    [K, 'CONST_INT', [Q1, A]],
    [K, 'CONST_FLOAT', [T1, Z]],
    [K, 'EMPTY', None],
    [K, 'char', None],
    [K, 'struct', None],
    [K, 'float', None],
    [K, 'MOD', None],
    [K, 'if', None],
    [K, 'else', None],
    [K, 'do', None],
    [K, 'while', None],
    [K, 'ID', [Q1, A]],
    [K, 'COMMA', None],
    [K, 'finInstruccion', None],
    [K, 'DECREMENT', None],
    [K, 'INCREMENT', None],
    [K, 'PLUS', None],
    [K, 'MINUS', None],
    [K, 'TIMES', None],
    [K, 'DIVIDE', None],
    [K, 'LESS', None],
    [K, 'GREATER', None],
    [K, 'ASSIGNMENT', None],
    [K, 'EQUALS', None],
    [K, 'DIFFERENT', None],
    [K, 'AND', None],
    [K, 'OR', None],
    [K, 'DOT', None],
    [K, 'APOSTROPHE', None],
    [K, 'for', None],
    [K, 'eof', None],

    # Anaya
    [A, 'int', None],
    [A, 'main', None],
    [A, 'LPAREN', None],
    [A, 'RPAREN', ['vacia']],
    [A, 'void', None],
    [A, 'inicioBloque', None],
    [A, 'return', None],
    [A, 'finBloque', None],
    [A, 'CONST_INT', None],
    [A, 'CONST_FLOAT', None],
    [A, 'EMPTY', None],
    [A, 'char', None],
    [A, 'struct', None],
    [A, 'float', None],
    [A, 'MOD', None],
    [A, 'if', None],
    [A, 'else', None],
    [A, 'do', None],
    [A, 'while', None],
    [A, 'ID', None],
    [A, 'COMMA', None],
    [A, 'finInstruccion', ['vacia']],
    [A, 'DECREMENT', None],
    [A, 'INCREMENT', None],
    [A, 'PLUS', None],
    [A, 'MINUS', None],
    [A, 'TIMES', None],
    [A, 'DIVIDE', None],
    [A, 'LESS', None],
    [A, 'GREATER', None],
    [A, 'ASSIGNMENT', None],
    [A, 'EQUALS', None],
    [A, 'DIFFERENT', None],
    [A, 'AND', None],
    [A, 'OR', None],
    [A, 'DOT', None],
    [A, 'APOSTROPHE', None],
    [A, 'for', None],
    [A, 'eof', None],

    [T1, 'int', None],
    [T1, 'main', None],
    [T1, 'LPAREN', ['LPAREN', K, 'RPAREN']],
    [T1, 'RPAREN', None],
    [T1, 'void', None],
    [T1, 'inicioBloque', None],
    [T1, 'return', None],
    [T1, 'finBloque', None],
    [T1, 'CONST_INT', ['CONST_INT']],
    [T1, 'CONST_FLOAT', ['CONST_FLOAT']],
    [T1, 'EMPTY', None],
    [T1, 'char', None],
    [T1, 'struct', None],
    [T1, 'float', None],
    [T1, 'MOD', None],
    [T1, 'if', None],
    [T1, 'else', None],
    [T1, 'do', None],
    [T1, 'while', None],
    [T1, 'ID', ['ID']],
    [T1, 'COMMA', None],
    [T1, 'finInstruccion', None],
    [T1, 'DECREMENT', None],
    [T1, 'INCREMENT', None],
    [T1, 'PLUS', None],
    [T1, 'MINUS', None],
    [T1, 'TIMES', None],
    [T1, 'DIVIDE', None],
    [T1, 'LESS', None],
    [T1, 'GREATER', None],
    [T1, 'ASSIGNMENT', None],
    [T1, 'EQUALS', None],
    [T1, 'DIFFERENT', None],
    [T1, 'AND', None],
    [T1, 'OR', None],
    [T1, 'DOT', None],
    [T1, 'APOSTROPHE', None],
    [T1, 'for', None],
    [T1, 'eof', None],

    [Z, 'int', None],
    [Z, 'main', None],
    [Z, 'LPAREN', None],
    [Z, 'RPAREN', ['vacia']],
    [Z, 'void', None],
    [Z, 'inicioBloque', None],
    [Z, 'return', None],
    [Z, 'finBloque', None],
    [Z, 'CONST_INT', None],
    [Z, 'CONST_FLOAT', None],
    [Z, 'EMPTY', None],
    [Z, 'char', None],
    [Z, 'struct', None],
    [Z, 'float', None],
    [Z, 'MOD', ['MOD', T1, Z]],
    [Z, 'if', None],
    [Z, 'else', None],
    [Z, 'do', None],
    [Z, 'while', None],
    [Z, 'ID', None],
    [Z, 'COMMA', None],
    [Z, 'finInstruccion', ['vacia']],
    [Z, 'DECREMENT', None],
    [Z, 'INCREMENT', None],
    [Z, 'PLUS', ['vacia']],
    [Z, 'MINUS', ['vacia']],
    [Z, 'TIMES', ['TIMES', T1, Z]],
    [Z, 'DIVIDE', ['TIMES', T1, Z]],
    [Z, 'LESS', None],
    [Z, 'GREATER', None],
    [Z, 'ASSIGNMENT', None],
    [Z, 'EQUALS', None],
    [Z, 'DIFFERENT', None],
    [Z, 'AND', None],
    [Z, 'OR', None],
    [Z, 'DOT', None],
    [Z, 'APOSTROPHE', None],
    [Z, 'for', None],
    [Z, 'eof', None],

    [T2, 'int', None],
    [T2, 'main', None],
    [T2, 'LPAREN', None],
    [T2, 'RPAREN', ['vacia']],
    [T2, 'void', None],
    [T2, 'inicioBloque', None],
    [T2, 'return', None],
    [T2, 'finBloque', None],
    [T2, 'CONST_INT', ['CONST_INT', T3]],
    [T2, 'CONST_FLOAT', ['CONST_FLOAT', T3]],
    [T2, 'EMPTY', None],
    [T2, 'char', None],
    [T2, 'struct', None],
    [T2, 'float', None],
    [T2, 'MOD', None],
    [T2, 'if', None],
    [T2, 'else', None],
    [T2, 'do', None],
    [T2, 'while', None],
    [T2, 'ID', ['ID', T3]],
    [T2, 'COMMA', None],
    [T2, 'finInstruccion', None],
    [T2, 'DECREMENT', None],
    [T2, 'INCREMENT', None],
    [T2, 'PLUS', None],
    [T2, 'MINUS', None],
    [T2, 'TIMES', None],
    [T2, 'DIVIDE', None],
    [T2, 'LESS', None],
    [T2, 'GREATER', None],
    [T2, 'ASSIGNMENT', None],
    [T2, 'EQUALS', None],
    [T2, 'DIFFERENT', None],
    [T2, 'AND', None],
    [T2, 'OR', None],
    [T2, 'DOT', None],
    [T2, 'APOSTROPHE', None],
    [T2, 'for', None],
    [T2, 'eof', None],

    [T3, 'int', None],
    [T3, 'main', None],
    [T3, 'LPAREN', None],
    [T3, 'RPAREN', ['vacia']],
    [T3, 'void', None],
    [T3, 'inicioBloque', None],
    [T3, 'return', None],
    [T3, 'finBloque', None],
    [T3, 'CONST_INT', None],
    [T3, 'CONST_FLOAT', None],
    [T3, 'EMPTY', None],
    [T3, 'char', None],
    [T3, 'struct', None],
    [T3, 'float', None],
    [T3, 'MOD', None],
    [T3, 'if', None],
    [T3, 'else', None],
    [T3, 'do', None],
    [T3, 'while', None],
    [T3, 'ID', None],
    [T3, 'COMMA', ['COMMA', 'ID', T3]],
    [T3, 'finInstruccion', None],
    [T3, 'DECREMENT', None],
    [T3, 'INCREMENT', None],
    [T3, 'PLUS', None],
    [T3, 'MINUS', None],
    [T3, 'TIMES', None],
    [T3, 'DIVIDE', None],
    [T3, 'LESS', None],
    [T3, 'GREATER', None],
    [T3, 'ASSIGNMENT', None],
    [T3, 'EQUALS', None],
    [T3, 'DIFFERENT', None],
    [T3, 'AND', None],
    [T3, 'OR', None],
    [T3, 'DOT', None],
    [T3, 'APOSTROPHE', None],
    [T3, 'for', None],
    [T3, 'eof', None],

    [T4, 'int', [D, 'ID', T5]],
    [T4, 'main', None],
    [T4, 'LPAREN', None],
    [T4, 'RPAREN', None],
    [T4, 'void', None],
    [T4, 'inicioBloque', None],
    [T4, 'return', None],
    [T4, 'finBloque', None],
    [T4, 'CONST_INT', None],
    [T4, 'CONST_FLOAT', None],
    [T4, 'EMPTY', None],
    [T4, 'char', [D, 'ID', T5]],
    [T4, 'struct', None],
    [T4, 'float', [D, 'ID', T5]],
    [T4, 'MOD', None],
    [T4, 'if', None],
    [T4, 'else', None],
    [T4, 'do', None],
    [T4, 'while', None],
    [T4, 'ID', None],
    [T4, 'COMMA', None],
    [T4, 'finInstruccion', None],
    [T4, 'DECREMENT', None],
    [T4, 'INCREMENT', None],
    [T4, 'PLUS', None],
    [T4, 'MINUS', None],
    [T4, 'TIMES', None],
    [T4, 'DIVIDE', None],
    [T4, 'LESS', None],
    [T4, 'GREATER', None],
    [T4, 'ASSIGNMENT', None],
    [T4, 'EQUALS', None],
    [T4, 'DIFFERENT', None],
    [T4, 'AND', None],
    [T4, 'OR', None],
    [T4, 'DOT', None],
    [T4, 'APOSTROPHE', None],
    [T4, 'for', None],
    [T4, 'eof', None],

    [T5, 'int', None],
    [T5, 'main', None],
    [T5, 'LPAREN', None],
    [T5, 'RPAREN', ['vacia']],
    [T5, 'void', None],
    [T5, 'inicioBloque', None],
    [T5, 'return', None],
    [T5, 'finBloque', None],
    [T5, 'CONST_INT', None],
    [T5, 'CONST_FLOAT', None],
    [T5, 'EMPTY', None],
    [T5, 'char', None],
    [T5, 'struct', None],
    [T5, 'float', None],
    [T5, 'MOD', None],
    [T5, 'if', None],
    [T5, 'else', None],
    [T5, 'do', None],
    [T5, 'while', None],
    [T5, 'ID', None],
    [T5, 'COMMA', ['COMMA', T4]],
    [T5, 'finInstruccion', None],
    [T5, 'DECREMENT', None],
    [T5, 'INCREMENT', None],
    [T5, 'PLUS', None],
    [T5, 'MINUS', None],
    [T5, 'TIMES', None],
    [T5, 'DIVIDE', None],
    [T5, 'LESS', None],
    [T5, 'GREATER', None],
    [T5, 'ASSIGNMENT', None],
    [T5, 'EQUALS', None],
    [T5, 'DIFFERENT', None],
    [T5, 'AND', None],
    [T5, 'OR', None],
    [T5, 'DOT', None],
    [T5, 'APOSTROPHE', None],
    [T5, 'for', None],
    [T5, 'eof', None]
]

stack = ['eof', 0]

# Build the lexer
lexer = lex.lex()


def miParser():
    f = open('fuente.c', 'r')
    lexer.input(f.read())

    tok = lexer.token()
    x = stack[-1]  # primer elemento de der a izq

    while True:
        print(tok.type, "elemento:    '" ,tok.value, "'      " ,tok.lineno, tok.lexpos, "valor de x: ", x)

        if x == tok.type and x == 'eof':
            print("Cadena terminada exitosamente")
            return  # aceptar
        else:
            if x == tok.type and x != 'eof':
                print("entró aqui")
                stack.pop()
                x = stack[-1]
                tok = lexer.token()
                print(tok)
            if x in tokens and x != tok.type:
                print("Error: se esperaba ", x)
                print('en la posicion: ', tok.lexpos)

                # poner el token que se esperaba en la cadena
                # estrategia modificar cadana y reiniciar parser (no recomendado)
                print(stack)
                tok.type = x

            if x not in tokens:  # es no terminal
                celda = buscar_en_tabla(x, tok.type)
                if celda is None:
                    print("Error: NO se esperaba", tok.type, " se esperaba: ", x)
                    print("En posición:", tok.lexpos)
                    print(tok.type, "elemento:    '", tok.value, "'      ", tok.lineno, tok.lexpos, "valor de x: ", x)
                    return 0;
                else:
                    stack.pop()
                    agregar_pila(celda)
                    print(stack)
                    print("------------")
                    x = stack[-1]


def buscar_en_tabla(no_terminal, terminal):
    for i in range(len(tabla)):
        if tabla[i][0] == no_terminal and tabla[i][1] == terminal:
            return tabla[i][2]  # retorno la celda


def agregar_pila(produccion):
    for elemento in reversed(produccion):
        if elemento != 'vacia':  # la vacía no la inserta
            stack.append(elemento)


def main():
    miParser()
    # f = open('fuente.c', 'r')
    # lexer.input(f.read())
    # while True:
    #     tok = lexer.token()
    #     if not tok:
    #         break
    #     # print(tok)
    #     print(tok.type, "elemento:    '" ,tok.value, "'      " ,tok.lineno, tok.lexpos)


if __name__ == "__main__":
    main()
